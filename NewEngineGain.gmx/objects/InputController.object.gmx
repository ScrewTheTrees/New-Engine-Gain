<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controlledEntity = EntityPlayerControlled;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (controlledEntity)
{
    if (keyboard_check(vk_right))
        inputHold[INPUT.keyRight] = true;
    else inputHold[INPUT.keyRight] = false;
    
    if (keyboard_check(vk_left))
        inputHold[INPUT.keyLeft] = true;
    else inputHold[INPUT.keyLeft] = false;
    
    if (keyboard_check(vk_up))
        inputHold[INPUT.keyUp] = true;
    else inputHold[INPUT.keyUp] = false;
    
    if (keyboard_check(vk_down))
        inputHold[INPUT.keyDown] = true;
    else inputHold[INPUT.keyDown] = false;
    
    if (keyboard_check(ord("Z")))
    {
        inputHold[INPUT.keyJump] = true;
    }
    else inputHold[INPUT.keyJump] = false;
    
    
    for (var i = 0; i&lt;=INPUT.keyMax; i++)
    {
        if (inputHoldPrevious[i] == false) and (inputHold[i] = true)
        {
            queueInput = 2;
            inputPressed[i] = true;
        }
        else inputPressed[i] = false
        
        if (inputHoldPrevious[i] == true) and (inputHold[i] = false)
        {
            queueInput = 2;
            inputReleased[i] = true;
        }
        else inputReleased[i] = false
        
        inputHoldPrevious[i] = inputHold[i];
    }
}

/*
    inputPressed[i] = false;
    inputHold[i] = false;
    inputHoldPrevious[i] = false; //To identify Hold/Release
    inputRelease[i] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
